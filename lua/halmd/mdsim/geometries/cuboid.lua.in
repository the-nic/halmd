--
-- Copyright © 2014 Nicolas Höft
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.


local utility = require("halmd.utility")
local device  = require("halmd.utility.device")
local module  = require("halmd.utility.module")

---
-- Cuboid
-- ======
--
-- Selects particles that are inside or outside a specified cuboid domain of the system.
--

local cuboid
if device.gpu then
    cuboid = assert(libhalmd.mdsim.geometries.cuboid_float)
else
    cuboid = assert(libhalmd.mdsim.geometries.cuboid_double)
end

---
-- Construct cuboid geometry instance.
--
-- :param table args: keyword arguments
-- :param table args.origin: cuboid origin (ie. the lower left corner of the cuboid)
-- :param table args.length: cuboid edge lengths
-- :param string args.precision: floating point number precision
--
-- .. note::
--
--    This module does not perform a validation of the meaningfulness of the domain,
--    i.e. it does not test whether the geometry is placed outside the simulation
--    domain.
--
local M = module(function(args)
    utility.assert_type(args, "table")
    local origin = utility.assert_type(utility.assert_kwarg(args, "origin"), "table")
    local length = utility.assert_type(utility.assert_kwarg(args, "length"), "table")

    if #origin ~= #length  then
        error("'origin' and 'length' vector have mismatching dimensions", 2)
    end
    -- construct instance
    local self = cuboid(origin, length)

    return self
end)

return M
