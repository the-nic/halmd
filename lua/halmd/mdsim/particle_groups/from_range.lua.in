--
-- Copyright © 2012-2014 Felix Höfling
-- Copyright © 2015      Nicolas Höft
-- Copyright © 2012      Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local log     = require("halmd.io.log")
local module  = require("halmd.utility.module")
local utility = require("halmd.utility")
local mdsim   = {
    particle = require("halmd.mdsim.particle")
}

---
-- From Range
-- ==========
--
-- A particle group represents a subset of particles, which is defined
-- by an instance of particle together with a sequence of indices.
--
-- Example::
--
--    -- construct particle instance for given simulation domain
--    local system = halmd.mdsim.particle({particles = 10000, species = 2})
--
--    -- select each species, assuming particles of a species have contiguous tags
--    local group_A = halmd.mdsim.particle_groups.from_range({particle = system, range = {1, 5000}, label = "A"})
--    local group_B = halmd.mdsim.particle_groups.from_range({particle = system, range = {5001, 10000}, label = "B"})
--

-- grab C++ wrappers
local from_range = assert(libhalmd.mdsim.particle_groups.from_range)

---
-- Construct particle group from tag range.
--
-- :param table args: keyword arguments
-- :param args.particle: instance of :class:`halmd.mdsim.particle`
-- :param table args.range: particle tag range ``{first, last}``
-- :param string args.label: group label
-- :param boolean args.global: particle group can comprise the whole simulation
--                             world (*default:* ``false``)
--
-- .. note::
--
--    Particle tags are 1-based, i.e. the first particle has tag 1.
--
-- .. attribute:: particle
--
--    Instance of :class:`halmd.mdsim.particle`
--
-- .. attribute:: size
--
--    Number of particles in group.
--
-- .. attribute:: global
--
--    True if the particle group comprises the whole simulation world. This
--    requires that ``args.global`` was set to true upon construction and
--    that ``size`` equals the number of particles in ``particle``.
--
-- .. method:: to_particle(args)
--
--    :param table args: keyword argruments
--    :param args.particle: instance of :class:`halmd.mdsim.particle` *(optional)*
--    :param args.label: if ``args.particle`` not present, use this label for the
--                       newly constructed particle instance *(default: group label)*
--    :returns: instance of :class:`halmd.mdsim.particle` with data from the particle group
--
--    Copy the particle group to a new particle instance. If no parameters given,
--    a suitable particle instance will be constructed.
--
--    .. note::
--
--       Only positions, mass, species and velocity are copied to the new particle instance.
--       Other data (e.g. id, force) will not be copied.
--
local M = module(function(args)
    local particle = utility.assert_kwarg(args, "particle")
    local range = utility.assert_kwarg(args, "range")
    local label = utility.assert_type(args.label or assert(particle.label), "string")
    local global = utility.assert_type(args.global or false, "boolean")

    if type(range) ~= "table" or #range ~= 2 then
        error("invalid argument 'range'", 2)
    end

    local logger = log.logger({prefix = ("group (%s)"):format(label)})

    -- construct particle group from tag range
    local self = from_range(particle, range, logger)

    -- capture C++ method to_particle
    local to_particle = assert(self.to_particle)
    -- forward Lua method to_particle
    self.to_particle = function(self, args)
        -- construct particle instance, if none given
        local particle_dst = args and args.particle
        local label = (args and args.label) or self.label
        particle_dst = particle_dst or mdsim.particle({dimension = particle.dimension, particles = self.size, species = particle.nspecies, label = label, memory = particle.memory})
        to_particle(self, particle, particle_dst)
        return particle_dst
    end

    -- attach particle instance as read-only property
    self.particle = property(function(self)
        return particle
    end)

    -- attach label as read-only property
    self.label = property(function(self)
        return label
    end)

    -- attach global property
    self.global = property(function(self)
        return global and (self.size == particle.nparticle)
    end)

    return self
end)

return M
