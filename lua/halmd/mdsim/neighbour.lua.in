--
-- Copyright © 2010-2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local core                              = require("halmd.mdsim.core")
local device                            = require("halmd.utility.device")
local log                               = require("halmd.io.log")
local module                            = require("halmd.utility.module")
local mdsim = {
    binning                             = require("halmd.mdsim.binning")
  , max_displacement                    = require("halmd.mdsim.max_displacement")
  , sort                                = require("halmd.mdsim.sorts.hilbert")
}

-- grab C++ wrappers
local neighbours = {
    from_binning = {
        host = {
            [2] = assert(libhalmd.mdsim.host.neighbours.from_binning_2)
          , [3] = assert(libhalmd.mdsim.host.neighbours.from_binning_3)
        }
    }
  , from_particle = {
        host = {
            [2] = assert(libhalmd.mdsim.host.neighbours.from_particle_2)
          , [3] = assert(libhalmd.mdsim.host.neighbours.from_particle_3)
        }
    }
}
if libhalmd.mdsim.gpu then
    neighbours.from_binning.gpu = {
        [2] = assert(libhalmd.mdsim.gpu.neighbours.from_binning_2)
      , [3] = assert(libhalmd.mdsim.gpu.neighbours.from_binning_3)
    }
    neighbours.from_particle.gpu = {
        [2] = assert(libhalmd.mdsim.gpu.neighbours.from_particle_2)
      , [3] = assert(libhalmd.mdsim.gpu.neighbours.from_particle_3)
    }
end
local h5 = libhalmd.h5
local po = libhalmd.po


--
-- returns species label given a table of particle instances
--
local function label(particles)
    assert(#particles == 2)
    return "(" .. particles[1].label .. " ← " .. particles[2].label .. ")"
end

--
-- construct neighbour module
--
-- @param r_cut symmetric matrix with potential cutoff radii
--
local M = module(function(args)
    -- cutoff radius matrix of truncated potential
    local r_cut = assert(args.r_cut)
    -- neighbour list skin
    local skin = args.skin or 0.5 -- default value

    -- dependency injection
    local particle1 = assert(args.particle or args.particles[1])
    local particle2 = assert(args.particle or args.particles[2])
    local particles = {particle1, particle2}
    local box = assert(args.box)
    local dimension = #box.edges
    local logger = log.logger({label = "neighbour " .. label(particles)})

    -- domain decomposition
    local binning
    if not args.disable_binning then
        binning = mdsim.binning({box = box, particle = particle2, r_cut = r_cut, skin = skin, occupancy = args.occupancy})
    end

    -- neighbour lists
    local displacement = mdsim.max_displacement{box = box, particle = particle1}
    local neighbour
    if device.gpu then
        if binning then
            neighbour = assert(neighbours.from_binning.gpu[dimension])
        else
            neighbour = assert(neighbours.from_particle.gpu[dimension])
        end
        local defaults = assert(neighbour.defaults)
        local occupancy = args.occupancy or defaults.occupancy()
        if binning then
            neighbour = neighbour(particles, {binning, binning}, displacement, box, r_cut, skin, logger, occupancy)
        else
            neighbour = neighbour(particles, displacement, box, r_cut, skin, logger, occupancy)
        end
    else
        if binning then
            neighbour = neighbours.from_binning.host[dimension](particles, {binning, binning}, displacement, box, r_cut, skin, logger)
        else
            neighbour = neighbours.from_particle.host[dimension](particles, displacement, box, r_cut, skin, logger)
        end
    end

    -- store particle instances as Lua property
    neighbour.particles = property(function(self)
        return particles
    end)

    -- sort particles before neighbour list update
    if not args.disable_sorting then
        local sort = mdsim.sort{box = box, particle = particle1, binning = binning}
        neighbour:on_prepend_update(sort.order)
    end

    return neighbour
end)

--
-- connect runtime accumulators to module profiler
--
function M.profile(self, profiler)
    profiler:on_profile{self, update = "update of neighbour lists " .. label(self.particles)}
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function M.options(desc)
    desc:add("skin", po.float(), "neighbour list skin")
    if neighbours.from_binning.gpu then
        desc:add("occupancy", po.float(), "desired average cell occupancy")
    end
    desc:add("disable-binning", po.bool_switch(), "disable domain decomposition")
    desc:add("disable-sorting", po.bool_switch(), "disable domain decomposition")
end

--
-- read module parameters from HDF5 group
--
function M.read_parameters(args, group)
    args.skin = group:read_attribute("skin", h5.float())
    if neighbours.from_binning.gpu then
        args.occupancy = group:read_attribute("occupancy", h5.float())
    end
end

--
-- write module parameters to HDF5 group
--
-- @param neighbour module instance
-- @param group HDF5 group
--
function M.write_parameters(neighbour, group)
    group:write_attribute("skin", h5.float(), neighbour.r_skin)
    if neighbour.cell_occupancy then
        group:write_attribute("occupancy", h5.float(), neighbour.cell_occupancy)
    end
end

return M
