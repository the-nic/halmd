--
-- Copyright © 2013 Nicolas Höft
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local utility = require("halmd.utility")
local device  = require("halmd.utility.device")
local module  = require("halmd.utility.module")

---
-- Cubic Hermite interpolation
-- ===========================
--
-- When passed to :class:`halmd.mdsim.forces.tabulated`, this function
-- calculates the potential energy and force from lattice points of
-- precalculated potential energy points and coefficients at the lattice points.
--
-- In 1D the interpolated value :math:`\tilde V(x)` is calculated by the following
-- expression:
--
-- .. math::
--
--    \tilde V(x) = \sum_{i=0}^1 h_i^{(0)}(x_r) V(x_r) + h_i^{(1)}(x_r) \partial_x V(x_i)
--
-- where :math:`V(x_0)` and :math:`V(x_1)` are the potential values at the
-- neighbouring knots :math:`x_0` and :math:`x_1.`
-- :math:`\partial_x V(x_i)` is the first derivative of :math:`V(x)` at :math:`x_i`.
-- :math:`x_r` is the reduced distance :math:`\frac{x - x_0}{x_1 - x_0}`.
--
-- The functions :math:`h_i^{(0)}(x)` and :math:`h_i^{(1)}(x)` are defined as:
--
-- .. math::
--
--  h_i^{(0)} &= \begin{cases}
--             x^2(3-2x) & \text{if } i = 0 \\
--            (x-1)^2(1+2x) & \text{if } i = 1
--           \end{cases} \\
--  h_i^{(1)} &= \begin{cases}
--           d x^2(x-1) & \text{if } i = 0 \\
--           -d(1-x)^2 x & \text{if } i = 1
--  \end{cases}
--
-- where :math:`d = x_1 - x_0`.
--
--
-- Coefficients
-- ------------
--
-- The Cubic Hermite interpolation needs :math:`2^d` coefficients per neighbour
-- to determine the interpolated value. The coefficients must be given in the
-- following order: :math:`V(r)`, :math:`\partial_x V(r)`, :math:`\partial_y V(r)`,
-- :math:`\partial_x \partial_y V(r)`, :math:`\partial_z V(r)`,
-- :math:`\partial_x \partial_z V(r)`, :math:`\partial_y \partial_z V(r)`,
-- :math:`\partial_x \partial_y \partial_z V(r)`, where :math:`r` is the
-- position of the knot.
--
-- .. note::
--
--    The first derivatives are not the force, that is :math:`F(r) = -\nabla V(r)`
--
--
-- In two dimensions only the first 4 coefficients are needed. The index of the
-- first coefficient for a knot is given by :math:`2^d \times`
-- ``multi_index_to_offset(index, nknots)``, which is followed by all other
-- coefficients needed for the node at ``index``.
--
--
-- .. [1] Martin H. Schultz,
--       *Spline Analysis* (Ch. 3),
--       Prentice-Hall (Englewood Cliffs, N.J) (1972), ISBN 0138354057

-- grab C++ wrappers
local cubic_hermite = {
    single = assert(libhalmd.mdsim.forces.interpolation.cubic_hermite_float)
  , double = assert(libhalmd.mdsim.forces.interpolation.cubic_hermite_double)
}

---
-- Construct cubic hermite interpolator.
--
-- :param table args: keyword arguments
-- :param args.box: instance of :mod:`halmd.mdsim.box`
-- :param table args.length: length of the (optional, defaults to ``box.length``)
-- :param table args.origin: distance of the box to the origin (optional, defaults to ``box.origin``)
-- :param args.nknots: number of knots in each dimension, including edges
-- :type args.nknots: number table
-- :param string args.precision: floating point number precision
-- :returns: instance of cubic hermite interpolation scheme
--
-- If ``box`` is not given, the arguments ``length`` and ``origin`` have to be supplied. This
-- enables the possibility to have a smaller "unit cell" of the interpolation area,
-- while the simulation box may be multiples of this unit cell. ``length`` and ``origin`` both
-- precede ``box``.
--
-- The supported values for ``precision`` are "single" and "double". In 3D simulations double
-- precision is recommended also for the GPU as the number of mathematical operations is at the
-- order of 64.
--
-- .. attribute:: nknots()
--
--    Returns the number of grid points in each spatial direction as a sequence.
--
-- .. attribute:: total_knots()
--
--    Returns the total number of grid knots needed.
--
-- .. attribute:: grid_basis()
--
--    Returns the edge lengths of one grid cell.
--
-- .. method:: log(logger)
--
--    Output interpolation scheme to logger
--
--    :param logger: instance of :class:`halmd.io.log.logger`
--
local M = module(function(args)
    local precision = utility.assert_type(utility.assert_kwarg(args, "precision"), "string")
    local nknots = utility.assert_type(utility.assert_kwarg(args, "nknots"), "table")

    local length = args.length or utility.assert_kwarg(args, "box").length
    local origin = args.origin or utility.assert_kwarg(args, "box").origin()

    if not cubic_hermite[precision] then
        error("Unsupported precision", 2)
    end

    local self = cubic_hermite[precision](length, origin, nknots)

    self.log = function(self, logger)
        if not logger then
            error("bad argument #1", 2)
        end
        logger:info("Cubic Hermite spline interpolation")
    end

    self.coefficients_per_knot = property(function() return math.pow(2, box.dimension) end)

    return self
end)

return M
