--
-- Copyright © 2010-2012 Peter Colberg
-- Copyright © 2010 Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local clock             = require("halmd.mdsim.clock")
local core              = require("halmd.mdsim.core")
local log               = require("halmd.io.log")
local module            = require("halmd.utility.module")
local profiler          = require("halmd.utility.profiler")
local random            = require("halmd.random")

---
-- Velocity Verlet with Andersen thermostat
-- ========================================
--
-- This module implements the :doc:`Verlet algorithm <verlet>` with the Andersen thermostat.
--
-- .. warning::
--
--    This integrator may cause a significant drift of the centre of mass velocity.
--
--    For heating or cooling a system to a nominal temperature before
--    equilibration, we recommend the :class:`velocity-Verlet with Boltzmann
--    distribution <halmd.mdsim.integrators.verlet_boltzmann>` integrator.
--

-- grab C++ wrappers
local verlet_nvt_andersen = assert(libhalmd.mdsim.integrators.verlet_nvt_andersen)

---
-- Construct velocity-Verlet with Andersen thermostat.
--
-- :param table args: keyword arguments
-- :param args.group: instance of :mod:`halmd.mdsim.particle_groups`
-- :param args.force: instance of :mod:`halmd.mdsim.forces`
-- :param args.box: instance of :class:`halmd.mdsim.box`
-- :param number args.temperature: temperature of heat bath
-- :param number args.rate: collision rate
-- :param number args.timestep: integration timestep (defaults to :attr:`halmd.mdsim.clock.timestep`)
--
-- .. method:: set_timestep(timestep)
--
--    Set integration time step in MD units.
--
--    :param number timestep: integration timestep
--
--    This method forwards to :meth:`halmd.mdsim.clock.set_timestep`,
--    to ensure that all integrators use an identical time step.
--
-- .. attribute:: timestep
--
--    Integration time step.
--
-- .. method:: set_temperature(temperature)
--
--    Set temperature of heat bath.
--
--    :param number temperature: temperature of heat bath
--
-- .. attribute:: temperature
--
--    Temperature of heat bath.
--
-- .. attribute:: collision_rate
--
--    Collision rate with the heat bath.
--
-- .. method:: disconnect()
--
--    Disconnect integrator from core and profiler.
--
-- .. method:: connect()
--
--    Connect integrator to core and profiler.
--
--    By default the integrator is connected.
--
-- .. method:: integrate()
--
--    First leapfrog half-step of velocity-Verlet algorithm.
--
--    By default this function is connected to :meth:`halmd.mdsim.core.on_integrate`.
--
-- .. method:: finalize()
--
--    Second leapfrog half-step of velocity-Verlet algorithm.
--
--    By default this function is connected to :meth:`halmd.mdsim.core.on_finalize`.
--
local M = module(function(args)
    local group = args.group
    if not group then
        error("missing parameter: group", 2)
    end
    local particle = assert(group.particle)
    local force = args and args.force
    if not force then
        error("missing argument 'force'", 2)
    end
    local box = args.box
    if not box then
        error("missing argument 'box'", 2)
    end
    local temperature = args.temperature
    if not temperature then
        error("missing argument 'temperature'", 2)
    end
    local rate = args.rate
    if not rate then
        error("missing argument 'rate'", 2)
    end
    local timestep = args.timestep
    if timestep then
        clock:set_timestep(timestep)
    else
        timestep = assert(clock.timestep)
    end
    local rng = random.generator()
    local label = assert(group.label)
    local logger = log.logger({label = ("verlet_nvt_andersen (%s)"):format(label)})

    -- construct instance
    local self = verlet_nvt_andersen(particle, group, force, box, rng, timestep, temperature, rate, logger)

    -- capture C++ method set_timestep
    local set_timestep = assert(self.set_timestep)
    -- forward Lua method set_timestep to clock
    self.set_timestep = function(self, timestep)
        return clock:set_timestep(timestep)
    end

    -- sequence of signal connections
    local conn = {}

    self.connect = function(self)
        if #conn == 0 then
            table.insert(conn, assert(clock:on_set_timestep(function(timestep) set_timestep(self, timestep) end)))
            table.insert(conn, assert(core:on_prepend_integrate(function() self:acquire_net_force() end)))
            table.insert(conn, assert(core:on_integrate(function() self:integrate() end)))
            table.insert(conn, assert(core:on_prepend_finalize(function() self:acquire_net_force() end)))
            table.insert(conn, assert(core:on_finalize(function() self:finalize() end)))
            table.insert(conn, assert(profiler:on_profile(self.runtime.integrate, "first half-step of velocity-Verlet")))
            table.insert(conn, assert(profiler:on_profile(self.runtime.finalize, "second half-step of velocity-Verlet (+ Andersen thermostat)")))
        else
            error("integrator is already connected", 2)
        end
    end

    self.disconnect = function(self)
        if #conn > 0 then
            for i = 1, #conn do
                conn[i]:disconnect()
            end
            conn = {}
        else
            error("integrator is already disconnected", 2)
        end
    end

    -- connect integrator to core
    self:connect()

    return self
end)

return M
